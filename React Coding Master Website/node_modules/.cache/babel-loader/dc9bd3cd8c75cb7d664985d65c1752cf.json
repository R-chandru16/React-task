{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Coding Master Project\\\\React Coding Master Website\\\\src\\\\components\\\\Navbar\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer() {\n  _s();\n\n  // Get the current login time from local storage or set a new one if it doesn't exist\n  const [loginTime, setLoginTime] = useState(localStorage.getItem(\"loginTime\") ? new Date(localStorage.getItem(\"loginTime\")) : new Date()); // Update the timer every second\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      const elapsed = Date.now() - loginTime.getTime();\n      const hours = Math.floor(elapsed / (1000 * 60 * 60));\n      const minutes = Math.floor(elapsed % (1000 * 60 * 60) / (1000 * 60));\n      const seconds = Math.floor(elapsed % (1000 * 60) / 1000);\n      setTimer(`${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`); // Store the login time in local storage\n\n      localStorage.setItem(\"loginTime\", loginTime);\n    }, 1000); // Clear the login time from local storage and stop the timer when the component unmounts\n\n    return () => {\n      localStorage.removeItem(\"loginTime\");\n      clearInterval(timerInterval);\n    };\n  }, [loginTime]); // Render the login time and timer in the header\n\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Logged in since: \", loginTime.toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Time elapsed: \", timer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"UC9q2hjve4M6TtGqPM9e+J/S7f8=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["D:/React Coding Master Project/React Coding Master Website/src/components/Navbar/Timer.js"],"names":["React","useState","useEffect","Timer","loginTime","setLoginTime","localStorage","getItem","Date","timerInterval","setInterval","elapsed","now","getTime","hours","Math","floor","minutes","seconds","setTimer","toString","padStart","setItem","removeItem","clearInterval","toLocaleString","timer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACf;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CACxCK,YAAY,CAACC,OAAb,CAAqB,WAArB,IACI,IAAIC,IAAJ,CAASF,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAT,CADJ,GAEI,IAAIC,IAAJ,EAHoC,CAA1C,CAFe,CAQf;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,aAAa,GAAGC,WAAW,CAAC,MAAM;AACtC,YAAMC,OAAO,GAAGH,IAAI,CAACI,GAAL,KAAaR,SAAS,CAACS,OAAV,EAA7B;AACA,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAO,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAlB,CAAd;AACA,YAAMM,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYL,OAAO,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAR,IAAgC,OAAO,EAAvC,CAAX,CAAhB;AACA,YAAMO,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYL,OAAO,IAAI,OAAO,EAAX,CAAR,GAA0B,IAArC,CAAhB;AACAQ,MAAAA,QAAQ,CAAE,GAAEL,KAAK,CAACM,QAAN,GAAiBC,QAAjB,CAA0B,CAA1B,EAA6B,GAA7B,CAAkC,IAAGJ,OAAO,CACrDG,QAD8C,GAE9CC,QAF8C,CAErC,CAFqC,EAElC,GAFkC,CAE7B,IAAGH,OAAO,CAACE,QAAR,GAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAoC,EAFnD,CAAR,CALsC,CAStC;;AACAf,MAAAA,YAAY,CAACgB,OAAb,CAAqB,WAArB,EAAkClB,SAAlC;AACD,KAXgC,EAW9B,IAX8B,CAAjC,CADc,CAcd;;AACA,WAAO,MAAM;AACXE,MAAAA,YAAY,CAACiB,UAAb,CAAwB,WAAxB;AACAC,MAAAA,aAAa,CAACf,aAAD,CAAb;AACD,KAHD;AAID,GAnBQ,EAmBN,CAACL,SAAD,CAnBM,CAAT,CATe,CA8Bf;;AACA,sBACE;AAAA,4BACE;AAAA,sCAAuBA,SAAS,CAACqB,cAAV,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,mCAAoBC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GArCQvB,K;;KAAAA,K;AAuCT,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Timer() {\r\n  // Get the current login time from local storage or set a new one if it doesn't exist\r\n  const [loginTime, setLoginTime] = useState(\r\n    localStorage.getItem(\"loginTime\")\r\n      ? new Date(localStorage.getItem(\"loginTime\"))\r\n      : new Date()\r\n  );\r\n\r\n  // Update the timer every second\r\n  useEffect(() => {\r\n    const timerInterval = setInterval(() => {\r\n      const elapsed = Date.now() - loginTime.getTime();\r\n      const hours = Math.floor(elapsed / (1000 * 60 * 60));\r\n      const minutes = Math.floor((elapsed % (1000 * 60 * 60)) / (1000 * 60));\r\n      const seconds = Math.floor((elapsed % (1000 * 60)) / 1000);\r\n      setTimer(`${hours.toString().padStart(2, \"0\")}:${minutes\r\n        .toString()\r\n        .padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`);\r\n\r\n      // Store the login time in local storage\r\n      localStorage.setItem(\"loginTime\", loginTime);\r\n    }, 1000);\r\n\r\n    // Clear the login time from local storage and stop the timer when the component unmounts\r\n    return () => {\r\n      localStorage.removeItem(\"loginTime\");\r\n      clearInterval(timerInterval);\r\n    };\r\n  }, [loginTime]);\r\n\r\n  // Render the login time and timer in the header\r\n  return (\r\n    <header>\r\n      <div>Logged in since: {loginTime.toLocaleString()}</div>\r\n      <div>Time elapsed: {timer}</div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}